// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: go_client.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ClientRequest_SendRequest_FullMethodName    = "/pb.ClientRequest/SendRequest"
	ClientRequest_UploadToServer_FullMethodName = "/pb.ClientRequest/UploadToServer"
)

// ClientRequestClient is the client API for ClientRequest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientRequestClient interface {
	// Sends a client request
	SendRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	UploadToServer(ctx context.Context, opts ...grpc.CallOption) (ClientRequest_UploadToServerClient, error)
}

type clientRequestClient struct {
	cc grpc.ClientConnInterface
}

func NewClientRequestClient(cc grpc.ClientConnInterface) ClientRequestClient {
	return &clientRequestClient{cc}
}

func (c *clientRequestClient) SendRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, ClientRequest_SendRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientRequestClient) UploadToServer(ctx context.Context, opts ...grpc.CallOption) (ClientRequest_UploadToServerClient, error) {
	stream, err := c.cc.NewStream(ctx, &ClientRequest_ServiceDesc.Streams[0], ClientRequest_UploadToServer_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &clientRequestUploadToServerClient{stream}
	return x, nil
}

type ClientRequest_UploadToServerClient interface {
	Send(*UploadRequest) error
	CloseAndRecv() (*UploadResponse, error)
	grpc.ClientStream
}

type clientRequestUploadToServerClient struct {
	grpc.ClientStream
}

func (x *clientRequestUploadToServerClient) Send(m *UploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clientRequestUploadToServerClient) CloseAndRecv() (*UploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientRequestServer is the server API for ClientRequest service.
// All implementations must embed UnimplementedClientRequestServer
// for forward compatibility
type ClientRequestServer interface {
	// Sends a client request
	SendRequest(context.Context, *Request) (*Response, error)
	UploadToServer(ClientRequest_UploadToServerServer) error
	mustEmbedUnimplementedClientRequestServer()
}

// UnimplementedClientRequestServer must be embedded to have forward compatible implementations.
type UnimplementedClientRequestServer struct {
}

func (UnimplementedClientRequestServer) SendRequest(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRequest not implemented")
}
func (UnimplementedClientRequestServer) UploadToServer(ClientRequest_UploadToServerServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadToServer not implemented")
}
func (UnimplementedClientRequestServer) mustEmbedUnimplementedClientRequestServer() {}

// UnsafeClientRequestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientRequestServer will
// result in compilation errors.
type UnsafeClientRequestServer interface {
	mustEmbedUnimplementedClientRequestServer()
}

func RegisterClientRequestServer(s grpc.ServiceRegistrar, srv ClientRequestServer) {
	s.RegisterService(&ClientRequest_ServiceDesc, srv)
}

func _ClientRequest_SendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientRequestServer).SendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientRequest_SendRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientRequestServer).SendRequest(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientRequest_UploadToServer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClientRequestServer).UploadToServer(&clientRequestUploadToServerServer{stream})
}

type ClientRequest_UploadToServerServer interface {
	SendAndClose(*UploadResponse) error
	Recv() (*UploadRequest, error)
	grpc.ServerStream
}

type clientRequestUploadToServerServer struct {
	grpc.ServerStream
}

func (x *clientRequestUploadToServerServer) SendAndClose(m *UploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clientRequestUploadToServerServer) Recv() (*UploadRequest, error) {
	m := new(UploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientRequest_ServiceDesc is the grpc.ServiceDesc for ClientRequest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientRequest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ClientRequest",
	HandlerType: (*ClientRequestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendRequest",
			Handler:    _ClientRequest_SendRequest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadToServer",
			Handler:       _ClientRequest_UploadToServer_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "go_client.proto",
}
